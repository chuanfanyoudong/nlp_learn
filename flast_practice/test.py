#!/usr/bin/env python 
# encoding: utf-8 

"""
@author: zkjiang
@site: https://www.github.com/chuanfanyoudong
@software: PyCharm
@file: test.py
@time: 2019/3/11 19:09
"""
from sklearn.metrics import f1_score, precision_score, recall_score, accuracy_score
golden_lists = ['医生', '政治组织', '医生', '经济组织', '医生', '其他专有名词', '教师', '教师', '行政区划', '虚拟人物', '其他专有名词', '体育人士', '虚拟人物', '艺术文化人员', '行政区划', '景点', '医生', '教师', '教师', '文化组织', '虚拟人物', '虚拟人物', '经济人物', '文化组织', '艺术文化人员', '政治军事人物', '虚拟人物', '其他专有名词', '医生', '文化组织', '文化组织', '艺术文化人员', '教师', '体育人士', '地方商业', '艺术文化人员', '艺术文化人员', '其他专有名词', '艺术文化人员', '虚拟人物', '经济组织', '经济人物', '其他专有名词', '艺术文化人员', '事件', '艺术文化人员', '政治军事人物', '政治军事人物', '经济组织', '经济人物', '虚拟人物', '艺术文化人员', '艺术文化人员', '教师', '行政区划', '其他专有名词', '艺术文化人员', '政治军事人物', '休闲和运动', '其他专有名词', '政治军事人物', '其他专有名词', '艺术文化人员', '其他专有名词', '交通线路', '其他专有名词', '地方商业', '政治组织', '公共建筑', '经济组织', '艺术文化人员', '政治军事人物', '文化组织', '其他专有名词', '其他专有名词', '经济组织', '经济人物', '其他专有名词', '虚拟人物', '政治军事人物', '虚拟人物', '其他专有名词', '政治军事人物', '行政区划', '艺术文化人员', '虚拟人物', '体育人士', '教师', '政治组织', '休闲和运动', '公共建筑', '政治军事人物', '政治军事人物', '艺术文化人员', '工程技术人员', '行政区划', '行政区划', '艺术文化人员', '文化组织', '经济人物']
predict_lists = ['艺术文化人员', '经济组织', '政治军事人物', '行政区划', '政治军事人物', '其他专有名词', '政治军事人物', '政治军事人物', '经济组织', '其他专有名词', '其他专有名词', '艺术文化人员', '虚拟人物', '艺术文化人员', '行政区划', '政治军事人物', '政治军事人物', '政治军事人物', '政治军事人物', '文化组织', '经济组织', '虚拟人物', '政治军事人物', '文化组织', '艺术文化人员', '政治军事人物', '虚拟人物', '其他专有名词', '政治军事人物', '文化组织', '文化组织', '艺术文化人员', '政治军事人物', '政治军事人物', '行政区划', '艺术文化人员', '艺术文化人员', '其他专有名词', '艺术文化人员', '虚拟人物', '经济组织', '政治军事人物', '其他专有名词', '艺术文化人员', '其他专有名词', '艺术文化人员', '政治军事人物', '政治军事人物', '经济组织', '艺术文化人员', '其他专有名词', '艺术文化人员', '艺术文化人员', '艺术文化人员', '行政区划', '虚拟人物', '艺术文化人员', '政治军事人物', '其他专有名词', '其他专有名词', '政治军事人物', '其他专有名词', '政治军事人物', '其他专有名词', '行政区划', '其他专有名词', '行政区划', '文化组织', '行政区划', '行政区划', '艺术文化人员', '政治军事人物', '文化组织', '其他专有名词', '其他专有名词', '经济组织', '政治军事人物', '其他专有名词', '虚拟人物', '政治军事人物', '其他专有名词', '其他专有名词', '政治军事人物', '行政区划', '艺术文化人员', '虚拟人物', '艺术文化人员', '政治军事人物', '政治军事人物', '其他专有名词', '行政区划', '政治军事人物', '政治军事人物', '艺术文化人员', '政治军事人物', '行政区划', '行政区划', '虚拟人物', '文化组织', '政治军事人物']
# golden_lists = [1,2,3,4,1,2,3,4]
# predict_lists = [1,2,2,4,1,3,2,4]
num = 0
for i in range(100):
    print(golden_lists[i] , predict_lists[i])
    print("\n")
    if golden_lists[i] == predict_lists[i]:
        num += 1
print(num)
f1 = f1_score(golden_lists, predict_lists, average='macro')
p = precision_score(golden_lists, predict_lists, average='macro')
r = recall_score(golden_lists, predict_lists, average='macro')
a = accuracy_score(golden_lists, predict_lists)
print(f1)
print(p)
print(r)
print(a)